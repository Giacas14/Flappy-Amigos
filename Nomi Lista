<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Database Nomi</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .completed {
            text-decoration: line-through;
            color: #6b7280; /* Grigio più scuro per il testo depennato */
            background-color: #374151 !important; /* Sfondo più scuro per l'elemento completato */
        }
        .name-item {
            transition: all 0.3s ease-in-out;
        }
        /* Nasconde le viste non attive */
        .view {
            display: none;
        }
        /* Stili per la placeholder del campo di input in dark mode */
        ::placeholder {
            color: #9ca3af;
            opacity: 1; 
        }
        /* Animazione di fade-out quando un nome viene selezionato o eliminato */
        .fade-out {
            animation: fadeOut 0.3s ease-out forwards;
        }
        @keyframes fadeOut {
            from {
                opacity: 1;
                transform: scale(1);
            }
            to {
                opacity: 0;
                transform: scale(0.95);
            }
        }
        /* Stile per il pulsante disabilitato */
        button:disabled {
            opacity: 0.3;
            cursor: not-allowed;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-200 flex items-center justify-center min-h-screen py-8">

    <div class="w-full max-w-2xl mx-auto bg-gray-800 rounded-2xl shadow-lg p-6 md:p-8">

        <!-- Vista Menu Principale -->
        <div id="homeView" class="view">
            <header class="mb-8 text-center">
                <h1 class="text-3xl md:text-4xl font-bold text-white">Menu Principale</h1>
                <p class="text-gray-400 mt-2">Seleziona una vista.</p>
            </header>
            <div class="space-y-4">
                <button id="showListViewBtn" class="w-full text-lg bg-blue-600 text-white font-semibold py-4 px-6 rounded-xl hover:bg-blue-700 transition-colors duration-300">
                    Lista
                </button>
                <button id="showCompletedViewBtn" class="w-full text-lg bg-gray-600 text-white font-semibold py-4 px-6 rounded-xl hover:bg-gray-700 transition-colors duration-300">
                    Persone già entrate
                </button>
                 <button id="showAddViewBtn" class="w-full text-lg bg-teal-600 text-white font-semibold py-4 px-6 rounded-xl hover:bg-teal-700 transition-colors duration-300">
                    Aggiungi Nome
                </button>
            </div>
        </div>
        
        <!-- Vista Aggiungi Nome -->
        <div id="addView" class="view">
            <header class="mb-6 flex items-center justify-between">
                <h1 class="text-3xl font-bold text-white">Aggiungi Nome</h1>
                <button class="back-btn text-blue-400 hover:underline">Indietro</button>
            </header>
            <div class="space-y-4">
                 <input type="text" id="newNameInput" placeholder="Inserisci il nuovo nome..." class="w-full pl-4 pr-4 py-3 bg-gray-700 border border-gray-600 text-white rounded-xl focus:ring-2 focus:ring-teal-500">
                 <button id="saveNameBtn" class="w-full text-lg bg-teal-600 text-white font-semibold py-3 px-6 rounded-xl hover:bg-teal-700 transition-colors duration-300">
                    Salva
                </button>
            </div>
        </div>

        <!-- Vista Lista "Da selezionare" -->
        <div id="listView" class="view">
            <header class="mb-6 flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <h1 class="text-3xl font-bold text-white">Da selezionare</h1>
                    <div class="flex items-center space-x-2">
                        <button class="undo-btn p-1 rounded-full hover:bg-gray-700">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 15l-3-3m0 0l3-3m-3 3h8a5 5 0 010 10H6"></path></svg>
                        </button>
                        <button class="redo-btn p-1 rounded-full hover:bg-gray-700">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 15l3-3m0 0l-3-3m3 3H5a5 5 0 000 10h1"></path></svg>
                        </button>
                    </div>
                </div>
                <button class="back-btn text-blue-400 hover:underline">Indietro</button>
            </header>
            <div class="relative mb-6">
                <input type="text" id="searchInput" placeholder="Cerca un nome..." class="w-full pl-4 pr-10 py-3 bg-gray-700 border border-gray-600 text-white rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                <button id="clearSearchInput" class="absolute inset-y-0 right-0 flex items-center pr-3 cursor-pointer" style="display: none;">
                    <svg class="w-6 h-6 text-gray-500 hover:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </div>
            <div class="overflow-y-auto max-h-[60vh] pr-2">
                <ul id="namesList" class="space-y-3"></ul>
            </div>
        </div>

        <!-- Vista Lista "Già entrati" -->
        <div id="completedView" class="view">
             <header class="mb-6 flex items-center justify-between">
                <div class="flex items-center space-x-4">
                    <h1 class="text-3xl font-bold text-white">Già entrati</h1>
                    <div class="flex items-center space-x-2">
                         <button class="undo-btn p-1 rounded-full hover:bg-gray-700">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 15l-3-3m0 0l3-3m-3 3h8a5 5 0 010 10H6"></path></svg>
                        </button>
                        <button class="redo-btn p-1 rounded-full hover:bg-gray-700">
                            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 15l3-3m0 0l-3-3m3 3H5a5 5 0 000 10h1"></path></svg>
                        </button>
                    </div>
                </div>
                <button class="back-btn text-blue-400 hover:underline">Indietro</button>
            </header>
            <div class="relative mb-6">
                <input type="text" id="searchCompletedInput" placeholder="Cerca tra gli entrati..." class="w-full pl-4 pr-10 py-3 bg-gray-700 border border-gray-600 text-white rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                 <button id="clearSearchCompletedInput" class="absolute inset-y-0 right-0 flex items-center pr-3 cursor-pointer" style="display: none;">
                    <svg class="w-6 h-6 text-gray-500 hover:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
            </div>
            <div class="overflow-y-auto max-h-[60vh] pr-2">
                <ul id="completedNamesList" class="space-y-3"></ul>
            </div>
        </div>
        
        <footer class="mt-6 text-center">
            <p id="counter" class="text-gray-400"></p>
        </footer>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            let people;
            let undoHistory = [];
            let redoHistory = [];

            // Funzione per salvare lo stato corrente nella cronologia
            const saveStateToHistory = () => {
                undoHistory.push(JSON.parse(JSON.stringify(people)));
                redoHistory = []; // Una nuova azione cancella la cronologia di redo
                updateHistoryButtonsState();
            };

            // Funzione per salvare i progressi nel localStorage
            const saveProgress = () => {
                try {
                    localStorage.setItem('peopleData', JSON.stringify(people));
                } catch (e) {
                    console.error("Errore nel salvataggio dei dati:", e);
                }
            };

            // Funzione per caricare i progressi dal localStorage in modo sicuro
            const loadProgress = () => {
                const savedData = localStorage.getItem('peopleData');
                let parsedData = null;

                if (savedData) {
                    try {
                        parsedData = JSON.parse(savedData);
                    } catch (e) {
                        console.error("Dati salvati corrotti, reset in corso.", e);
                        localStorage.removeItem('peopleData');
                    }
                }

                if (parsedData && Array.isArray(parsedData)) {
                    people = parsedData;
                } else {
                    // Se non ci sono dati salvati o sono corrotti, usa la lista iniziale
                    const initialNames = [
                        "Alessandro zippo", "Alessia Clemente", "Alessia Cardascia", "Alessia Scarangella",
                        "Alexandra Ugnarovskaia", "Alice Sisto", "Andrea Puppo", "Andrea Cianciaruso",
                        "Annamaria Rampello", "Antonello Maiorano", "Antonello Garofalo", "Arianna Scarpetta",
                        "Bianca Bellotti", "Carola Caricola", "carolina mignozzi", "Claudia de Tullio",
                        "Claudio Albanese", "Claudio Di Gioia", "Claudio Modeo", "Daniele Calderoni",
                        "dario bellaj", "Davide D’Aloisio", "Davide Trono", "Domenico Masciopinto",
                        "Elisa Vozza", "Francesca Binetti", "Francesca Florio", "Francesca Illuzzi",
                        "Gaia Giampaolino", "Gaia Maggio", "Gaia Putignano", "Germana Cassetta",
                        "Giorgia Sisto", "Giorgia Cipolla", "Giorgia Renzullo", "giorgia pecorella",
                        "Giorgia Cipriani", "giovanna maldari", "Giovanni Mongelli", "Giulia Perinotto",
                        "Giulia Tozzi", "Giulia Patruno", "Giuliana De Palma", "Giuseppe Salomone",
                        "Gloria Basile", "gloria gassi", "Greta Ricci", "Guendalina Campanale",
                        "iriana iusco", "Jack Cascella", "Laura Squeo", "Luana Miacola",
                        "Luca Loiacono", "Ludovica Portincasa", "Marcello Lupis Tafaro", "Marco Milella",
                        "Marco Facchini", "Margherita Profili", "Maria Francesca Guerricchio", "Mariella Silvia Ebe Guerra",
                        "Martina Losurdo", "Martina Carbonara", "Martina Rota", "Mattia Lavacca",
                        "Miriam Giannini", "Nicola Scivetti", "Nicolò Colapietro", "Noemi Vidor",
                        "noemi stecchi", "Paolo Puppo", "rachele lorusso", "Rachele Rivoli",
                        "Roberta Zotta", "Roberta Ranieri", "Roberto Mezzina", "silvia giordano",
                        "Simone Adorisio", "Stefano Basile", "Tommaso Ranieri", "Vincenzo Bavaro",
                        "Vito Loschiavo", "Vito Cassano"
                    ];
                    people = initialNames.map((name, index) => ({
                        id: index,
                        name: name,
                        completed: false
                    }));
                }
            };

            // Elementi UI
            const views = document.querySelectorAll('.view');
            const searchInput = document.getElementById('searchInput');
            const searchCompletedInput = document.getElementById('searchCompletedInput');
            const clearSearchInput = document.getElementById('clearSearchInput');
            const clearSearchCompletedInput = document.getElementById('clearSearchCompletedInput');
            const namesList = document.getElementById('namesList');
            const completedNamesList = document.getElementById('completedNamesList');
            const counter = document.getElementById('counter');
            const showListViewBtn = document.getElementById('showListViewBtn');
            const showCompletedViewBtn = document.getElementById('showCompletedViewBtn');
            const showAddViewBtn = document.getElementById('showAddViewBtn');
            const backBtns = document.querySelectorAll('.back-btn');
            const newNameInput = document.getElementById('newNameInput');
            const saveNameBtn = document.getElementById('saveNameBtn');
            const undoBtns = document.querySelectorAll('.undo-btn');
            const redoBtns = document.querySelectorAll('.redo-btn');

            // Funzione per mostrare una vista specifica
            const showView = (viewId) => {
                views.forEach(view => view.style.display = 'none');
                document.getElementById(viewId).style.display = 'block';
                if (viewId === 'listView') renderPendingList();
                if (viewId === 'completedView') renderCompletedList();
                updateCounter();
            };

            // Funzione per renderizzare la lista "Da selezionare"
            const renderPendingList = () => {
                const searchTerm = searchInput.value.toLowerCase();
                namesList.innerHTML = '';
                const pendingPeople = people.filter(p => !p.completed && p.name.toLowerCase().includes(searchTerm));
                
                if (pendingPeople.length === 0) {
                    namesList.innerHTML = `<li class="text-center text-gray-400 py-4">Nessun nome da selezionare.</li>`;
                } else {
                    pendingPeople.forEach(person => namesList.appendChild(createNameElement(person)));
                }
            };
            
            // Funzione per renderizzare la lista "Già entrati"
            const renderCompletedList = () => {
                const searchTerm = searchCompletedInput.value.toLowerCase();
                completedNamesList.innerHTML = '';
                const completedPeople = people.filter(p => p.completed && p.name.toLowerCase().includes(searchTerm));

                if (completedPeople.length === 0) {
                    completedNamesList.innerHTML = `<li class="text-center text-gray-400 py-4">Nessuna persona è ancora entrata.</li>`;
                } else {
                    completedPeople.forEach(person => completedNamesList.appendChild(createNameElement(person)));
                }
            };

            // Funzione helper per creare un elemento <li>
            const createNameElement = (person) => {
                const li = document.createElement('li');
                li.className = 'name-item p-4 bg-gray-700 rounded-xl flex items-center justify-between';
                
                const nameSpan = document.createElement('span');
                nameSpan.textContent = person.name;
                nameSpan.className = 'flex-grow cursor-pointer';
                if (person.completed) {
                    li.classList.add('completed');
                }

                nameSpan.addEventListener('click', (event) => {
                    const clickedLi = event.currentTarget.parentElement;
                    clickedLi.classList.add('fade-out');
                    setTimeout(() => {
                        toggleCompleted(person.id);
                    }, 300); 
                });

                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'ml-4 p-1 rounded-full hover:bg-red-500/20';
                deleteBtn.innerHTML = `<svg class="w-5 h-5 text-gray-400 hover:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>`;
                
                deleteBtn.addEventListener('click', (event) => {
                    event.stopPropagation();
                    const clickedLi = event.currentTarget.parentElement;
                    clickedLi.classList.add('fade-out');
                    setTimeout(() => {
                        deleteName(person.id);
                    }, 300);
                });

                li.appendChild(nameSpan);
                li.appendChild(deleteBtn);
                return li;
            };

            // Funzione per eliminare un nome
            const deleteName = (id) => {
                saveStateToHistory();
                people = people.filter(p => p.id !== id);
                saveProgress();
                
                if (document.getElementById('listView').style.display === 'block') {
                    renderPendingList();
                } else {
                    renderCompletedList();
                }
                updateCounter();
            };

            // Funzione per cambiare lo stato e aggiornare la vista corrente
            const toggleCompleted = (id) => {
                saveStateToHistory();
                const person = people.find(p => p.id === id);
                if (person) {
                    person.completed = !person.completed;
                    saveProgress();
                    
                    if (document.getElementById('listView').style.display === 'block') {
                        searchInput.value = '';
                        handleClearButtonVisibility(searchInput, clearSearchInput);
                        renderPendingList();
                        searchInput.focus();
                    } else {
                        searchCompletedInput.value = '';
                        handleClearButtonVisibility(searchCompletedInput, clearSearchCompletedInput);
                        renderCompletedList();
                        searchCompletedInput.focus();
                    }
                    updateCounter();
                }
            };
            
            // Funzione per aggiornare il contatore
            const updateCounter = () => {
                const completedCount = people.filter(p => p.completed).length;
                const totalCount = people.length;
                counter.textContent = `Entrati: ${completedCount} / ${totalCount}`;
            };

            // Funzione per gestire la visibilità del pulsante "cancella"
            const handleClearButtonVisibility = (input, clearButton) => {
                if (input.value.length > 0) {
                    clearButton.style.display = 'flex';
                } else {
                    clearButton.style.display = 'none';
                }
            };

            // Funzione per aggiungere un nuovo nome
            const addNewName = () => {
                const name = newNameInput.value.trim();
                if (name) {
                    saveStateToHistory();
                    const newId = people.length > 0 ? Math.max(...people.map(p => p.id)) + 1 : 0;
                    people.push({ id: newId, name: name, completed: false });
                    saveProgress();
                    newNameInput.value = '';
                    updateCounter();
                    
                    saveNameBtn.textContent = 'Aggiunto!';
                    saveNameBtn.classList.remove('bg-teal-600', 'hover:bg-teal-700');
                    saveNameBtn.classList.add('bg-blue-600');
                    setTimeout(() => {
                        saveNameBtn.textContent = 'Salva';
                        saveNameBtn.classList.add('bg-teal-600', 'hover:bg-teal-700');
                        saveNameBtn.classList.remove('bg-blue-600');
                    }, 1000);
                }
            };

            // Funzione per annullare l'ultima azione
            const undoLastAction = () => {
                if (undoHistory.length > 0) {
                    redoHistory.push(JSON.parse(JSON.stringify(people)));
                    people = undoHistory.pop();
                    saveProgress();
                    
                    const currentViewId = document.querySelector('.view[style*="block"]').id;
                    showView(currentViewId);
                    updateHistoryButtonsState();
                }
            };

            // Funzione per ripristinare l'ultima azione annullata
            const redoLastAction = () => {
                if (redoHistory.length > 0) {
                    undoHistory.push(JSON.parse(JSON.stringify(people)));
                    people = redoHistory.pop();
                    saveProgress();
                    
                    const currentViewId = document.querySelector('.view[style*="block"]').id;
                    showView(currentViewId);
                    updateHistoryButtonsState();
                }
            };
            
            // Funzione per aggiornare lo stato dei pulsanti Annulla/Ripeti
            const updateHistoryButtonsState = () => {
                undoBtns.forEach(btn => btn.disabled = undoHistory.length === 0);
                redoBtns.forEach(btn => btn.disabled = redoHistory.length === 0);
            };

            // Event Listeners
            showListViewBtn.addEventListener('click', () => showView('listView'));
            showCompletedViewBtn.addEventListener('click', () => showView('completedView'));
            showAddViewBtn.addEventListener('click', () => showView('addView'));
            backBtns.forEach(btn => btn.addEventListener('click', () => showView('homeView')));
            saveNameBtn.addEventListener('click', addNewName);
            undoBtns.forEach(btn => btn.addEventListener('click', undoLastAction));
            redoBtns.forEach(btn => btn.addEventListener('click', redoLastAction));

            searchInput.addEventListener('input', () => {
                renderPendingList();
                handleClearButtonVisibility(searchInput, clearSearchInput);
            });

            searchCompletedInput.addEventListener('input', () => {
                renderCompletedList();
                handleClearButtonVisibility(searchCompletedInput, clearSearchCompletedInput);
            });

            clearSearchInput.addEventListener('click', () => {
                searchInput.value = '';
                renderPendingList();
                handleClearButtonVisibility(searchInput, clearSearchInput);
                searchInput.focus();
            });

            clearSearchCompletedInput.addEventListener('click', () => {
                searchCompletedInput.value = '';
                renderCompletedList();
                handleClearButtonVisibility(searchCompletedInput, clearSearchCompletedInput);
                searchCompletedInput.focus();
            });

            // Inizializzazione
            loadProgress();
            showView('homeView');
            updateHistoryButtonsState();
        });
    </script>

</body>
</html>